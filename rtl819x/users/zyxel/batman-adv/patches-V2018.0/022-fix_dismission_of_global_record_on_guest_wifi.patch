--- batman-adv-2018.0/net/batman-adv/fast_batman.c	2018-07-19 16:20:35.923092310 +0800
+++ batman-adv-2018.0/net/batman-adv/fast_batman.c	2018-07-25 09:52:27.798046419 +0800
@@ -406,7 +406,7 @@
 		xxxFASTBAT_DBG_MSG(" prohibit bat iface!!!\n");
 		goto    RETN;
 	}
-	xxxFASTBAT_DBG_RAW_MSG("[F@STBAT] %pM %s\n", ethhdr->h_dest, out->name);
+	xxxFASTBAT_DBG_RAW_MSG("[F@STBAT] local bat - %pM %s\n", ethhdr->h_dest, out->name);
 
 	/* search local list */
 	local=fastbat_local_search(ethhdr->h_dest);
@@ -423,17 +423,24 @@
 		goto	RETN;
 	}
 #if		defined(BYPASS_GUEST_LAN)
-	/* check vlan type on global bat list */
+	/* check vlan type from global bat list */
+	/* 1. check from global bat record, however, it would failed at some situtations.
+	 *  a) local would be created be4 global due to disconnection or else
+	 *  b) global would be deleted due to commit 41923bf0
+	 * 2. check output dev name, ie. verdict string "-va" with outdev(wlan0-va0/wlan2-va0)
+	 */
 	{
-		int			idx=0;
-		FAST_BAT	*bat;
-		for(; idx<FAST_BAT_LIST_LEN; idx++) {
-			hlist_for_each_entry(bat, &bats[idx], list) {
-				if((bat->vlan == 2) && !memcmp(bat->src, ethhdr->h_dest, ETH_ALEN)) {
+		char		va_string[]="-va";
+		//int		idx=0;
+		//FAST_BAT	*bat;
+		//for(; idx<FAST_BAT_LIST_LEN; idx++) {
+		//	hlist_for_each_entry(bat, &bats[idx], list) {
+		//		if((bat->vlan == 2) && !memcmp(bat->src, ethhdr->h_dest, ETH_ALEN)) {
+		if(!memcmp((char *)out+5, va_string, 3)) {
 					vlan=2;
 					xxxFASTBAT_DBG_RAW_MSG("[F@STBAT] vlan inside local!!!\n");
-				}
-			}
+		//		}
+		//	}
 		}
 	}
 #endif
@@ -691,7 +698,7 @@
 #endif
 	}
 
-	FASTBAT_DBG_RAW_MSG("[F@STBAT] insert new list!\n");
+	FASTBAT_DBG_RAW_MSG("[F@STBAT] insert new list (%pM)=>(%pM)!\n", bat->src, bat->dst);
 	//fastbat_show_list_entry(fastbat_hash_calculate(bat->src, bat->dst));
 	return	0;
 FREE:
@@ -1593,7 +1600,7 @@
 	u32			idx=0;
 	int			dirty=0;
 
-	FASTBAT_DBG_RAW_MSG("[F@STBAT] setup dirty (o)%pM\n", addr);
+	FASTBAT_DBG_RAW_MSG("[F@STBAT] setup dirty from disconnect (o)%pM\n", addr);
 	for(; idx<FAST_BAT_LIST_LEN; idx++) {
 		hlist_for_each_entry(bat, &bats[idx], list) {
 			if(bat->dirty)
