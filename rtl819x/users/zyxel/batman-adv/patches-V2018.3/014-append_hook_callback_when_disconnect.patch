--- batman-adv-2018.3/net/batman-adv/fast_batman.c	2018-11-09 14:33:38.618481757 +0800
+++ batman-adv-2018.3/net/batman-adv/fast_batman.c	2018-11-09 14:49:31.182479745 +0800
@@ -1415,6 +1415,31 @@
 		queue_delayed_work(batadv_event_workqueue, &fastbat_work, msecs_to_jiffies(FASTBAT_DIRTY_PURGE));
 }
 
+void	fastbat_check_disconnect_neighbor_and_setup_dirty
+(u8 *addr)
+{
+	FAST_BAT	*bat;
+	u32			idx=0;
+	int			dirty=0;
+
+	FASTBAT_DBG_RAW_MSG("[F@STBAT] setup dirty (o)%pM\n", addr);
+	for(; idx<FAST_BAT_LIST_LEN; idx++) {
+		hlist_for_each_entry(bat, &bats[idx], list) {
+			if(bat->dirty)
+				continue;
+			//if(!memcmp(addr, bat->dst1, ETH_ALEN) || !memcmp(addr, bat->src1, ETH_ALEN)) {
+			if(!memcmp(addr, bat->orig, ETH_ALEN)) {
+				bat->dirty=1;
+				dirty=1;
+				FASTBAT_DBG_RAW_MSG("[F@STBAT] find out:(o)%pM\n (s)%pM\n (d)%pM\n (rs)%pM\n (rd)%pM\n", 
+					bat->orig, bat->src1, bat->dst1, bat->src, bat->dst);
+			}
+		}
+	}
+	if(dirty)
+		queue_delayed_work(batadv_event_workqueue, &fastbat_work, msecs_to_jiffies(FASTBAT_DIRTY_PURGE));
+}
+
 void	fastbat_check_orig_and_setup_dirty
 (struct batadv_orig_node *orig_node, 
  struct batadv_neigh_node *neigh_node)
--- batman-adv-2018.3/net/batman-adv/originator.c	2018-09-14 16:55:59.000000000 +0800
+++ batman-adv-2018.3/net/batman-adv/originator.c	2018-11-09 14:44:40.418480359 +0800
@@ -1180,6 +1180,10 @@
 	return ifinfo_purged;
 }
 
+#if	defined(CONFIG_BATMAN_ADV_FASTBAT)
+extern void fastbat_check_disconnect_neighbor_and_setup_dirty(u8 *addr);
+#endif
+
 /**
  * batadv_purge_orig_neighbors() - purges neighbors from originator
  * @bat_priv: the bat priv with all the soft interface information
@@ -1225,6 +1229,11 @@
 			neigh_purged = true;
 
 			hlist_del_rcu(&neigh_node->list);
+#if	defined(CONFIG_BATMAN_ADV_FASTBAT)
+			//printk(KERN_ERR "[B@TMAN] purge orig neighbors(%pM) (%pM)!!!\n",
+			//	orig_node->orig, neigh_node->addr);
+			fastbat_check_disconnect_neighbor_and_setup_dirty(orig_node->orig);
+#endif
 			batadv_neigh_node_put(neigh_node);
 		} else {
 			/* only necessary if not the whole neighbor is to be
