#!/bin/sh
# Copyright (C) 2008-2010 OpenWrt.org

# ---------------------------------------------
# It will create three chain in FORWARD chain
# named parentel_schdeule
#		parental_network_service
#		parental_keyword
# ---------------------------------------------

# check mode,if AP/UR,exit
GETMIB="flash get"
eval `$GETMIB OP_MODE`
[ "$OP_MODE" != "0" ] && exit 0

wan_proto=$(uci get network.wan.proto)
wan_interface="eth1"
#if [ "$wan_proto" == "pppoe" ] || [ "$wan_proto" == "pptp" ]; then
if [ "$wan_proto" == "pppoe" ]; then
  wan_interface="ppp0"
fi
#echo "$wan_interface" > /tmp/WAN_interface

lan_IP=$(uci get network.br0.ipaddr)

. /sbin/functions.sh
include /sbin/uci.sh

parentalControl(){

  # already built in
  #
  #insmod x_tables  2>&- >&-
  #insmod ip_tables  2>&- >&-
  #insmod ip6_tables  2>&- >&-
  #insmod iptable_filter  2>&- >&-
  #insmod ipt_REJECT  2>&- >&-
  #insmod xt_tcpudp  2>&- >&-
  #insmod xt_string  2>&- >&-
  #insmod xt_webstr  2>&- >&-

  rule_num=$(uci get parentalControl.general.count)
  redirect_enable=$(uci get parentalControl.general.enable_redirect)
  redirect_http_port=$(uci get parentalControl.general.redirect_HTTP_port)
  redirect_https_port=$(uci get parentalControl.general.redirect_HTTPS_port)

  ##Parental Control
  iptables -V > /tmp/iptablesVer
  iptables_version=$(cat /tmp/iptablesVer |awk -F "." '{ print $3 }')
  kerneltz=""
  if [ "$iptables_version" == "21" ]; then
    kerneltz="--kerneltz"
  fi

  ##defined time
  local days_per_week=7
  local hours_per_day=24
  local mins_per_hour=60
  local secs_per_min=60
  local schedule_min=15
  local units_per_hour=$((mins_per_hour / schedule_min))
  local endindex_of_day=$((hours_per_day * units_per_hour - 1))

  #clean parentalImmediate when new event that edit or delete ...
  find /tmp -maxdepth 1 -name 'parentalImmediateAction*' | while read -r parentalImmediateAction
  do
    while IFS= read -r LINE
    do
      string=$(echo "$LINE" | grep iptables)
      eval "$string"
      string=$(echo "$LINE" | grep atrm)
      eval "$string"
      string=$(echo "$LINE" | grep 'rm --')
      eval "$string"
    done < "$parentalImmediateAction"
  done

  i=1 #init
  while [ "$i" -le "$rule_num" ]
  do
    rule_enable=$(uci get parentalControl.rule$i.enable)
    if [ "$rule_enable" = "1" ]; then
      #
      # get Value
      #
      ## WSR30 does not have this function
      #filter_keyword=$(uci get parentalControl.rule$i.keyword)
      mac_list=$(uci get parentalControl.rule$i.maclist)
      service_count=$(uci get parentalControl.rule$i.service_count)
      service_act=$(uci get parentalControl.rule$i.service_act)

      #
      # check schedule time
      #
      schedule_enable=$(uci get parentalControl.rule$i.schedule_enable)
      if [ "$schedule_enable" = "1" ]; then
        
        for every_day in "sun" "mon" "tue" "wed" "thu" "fri" "sat"
        do
          [ "$every_day" = "sun" ] && weekday="Sun"
          [ "$every_day" = "mon" ] && weekday="Mon"
          [ "$every_day" = "tue" ] && weekday="Tue"
          [ "$every_day" = "wed" ] && weekday="Wed"
          [ "$every_day" = "thu" ] && weekday="Thu"
          [ "$every_day" = "fri" ] && weekday="Fri"
          [ "$every_day" = "sat" ] && weekday="Sat"

          local time1=""
          local time2=""
          local access_time=""
          local count=0
          local hour=0
          local minute=0
          for schedule_unit in $(uci get parentalControl.rule$i.schedule_$every_day | tr -s "," " ")
          do
            ## find 0~1 access_time
            if [ "$time1" = "" ] && [ "$schedule_unit" = "0" ]; then # find '0' assign to time1
              hour=$((count / units_per_hour))
              minute=$((count % units_per_hour * schedule_min))
              time1="--timestart $hour:$minute"
            elif [ "$time1" != "" ] && [ "$schedule_unit" = "1" ]; then #find '1' assign to time2
              hour=$((count / units_per_hour))
              minute=$((count % units_per_hour * schedule_min))
              time2="--timestop $hour:$minute"
              access_time="-m time --weekdays $weekday $time1 $time2 $kerneltz"
              time1=""
            fi

            # 24:00 check
            if [ "$count" = "$endindex_of_day" ] && [ "$schedule_unit" = "0" ]; then
              access_time="-m time --weekdays $weekday $time1 --timestop 23:59:59 $kerneltz"
              time1=""
            fi
            
            if [ -n "$access_time" ]; then
              for mac in $mac_list
              do
                # parental schedule
                iptables -I parental_schedule -m mac --mac-source $mac $access_time -j RETURN
                if [ "$redirect_enable" = 1 ]; then
                  iptables -t nat -I parental_routing -m mac --mac-source $mac $access_time -j RETURN
                fi
              done
              access_time="" #init
            fi

            count=$((count + 1))
          done
        done

        for mac in $mac_list
        do
          iptables -A parental_schedule -m mac --mac-source $mac -j DROP

          if [ "$redirect_enable" = 1 ]; then
            iptables -t nat -A parental_routing ! -i $wan_interface ! -d $lan_IP -p tcp --dport 80 -m mac --mac-source $mac -j DNAT --to $lan_IP:8008
            iptables -t nat -A parental_routing ! -i $wan_interface ! -d $lan_IP -p tcp --dport 443 -m mac --mac-source $mac -j DNAT --to $lan_IP:$redirect_https_port
          fi
        done
      fi

      #
      # parentalImmediateAction
      # reload
      #
      immediate_action_stoptimestamps=$(uci get parentalControl.rule$i.immediate_action_stoptimestamps)
      nowtimestamp=$(date +%s)
      if [ "$immediate_action_stoptimestamps" -gt "$nowtimestamp" ] || [ "$immediate_action_stoptimestamps" = 0 ]; then
        immediate_block_state=$(uci get parentalControl.rule$i.immediate_block_state)
        if [ -z "$immediate_block_state" ]; then 
          : #do noting because empty string
        elif [ "$immediate_block_state" = "Block" ]; then
          /usr/sbin/parental_iptable.sh immediateAction "$i" "$immediate_action_stoptimestamps" "REJECT"
        elif [ "$immediate_block_state" = "Allow" ]; then
          /usr/sbin/parental_iptable.sh immediateAction "$i" "$immediate_action_stoptimestamps" "RETURN"
        fi
      fi

    fi
    i=$((i + 1))
  done

}

reload_parental_control(){

  killall -9 crond
  if [ -f /etc/crontabs/root ]; then
    sed -i -e '/notification.sh/d' /etc/crontabs/root
    sed -i -e '/resume.sh/d' /etc/crontabs/root
  fi

  parentalEnable=$(uci get parentalControl.general.enable)
  if [ "$parentalEnable" == "1" ]; then
    parentalControl
    parental_tool -t create_crontab
  fi
}

boot(){
  #  check chain is created.
  parentalIptable=$(/usr/sbin/parental_iptable.sh check)
  if [ "$parentalIptable" == "chainNotExist" ]; then
    /usr/sbin/iptables_app_order
  fi

  reload_parental_control
  /etc/init.d/cron restart
}

start(){
  #  check chain is created.
  parentalIptable=$(/usr/sbin/parental_iptable.sh check)
  if [ "$parentalIptable" == "chainNotExist" ]; then
    /usr/sbin/iptables_app_order
  else
    /usr/sbin/parental_iptable.sh clean
  fi
  reload_parental_control
  /etc/init.d/firewall_blockdevice reload ## reload prerouting_parent_rule chain because if device move to parental.config from firewall_blockdevice.config
  /etc/init.d/cron restart
}

stop(){
  /usr/sbin/parental_iptable.sh clean
  parental_tool -t clean_crontab_parental_tool_rule
  /etc/init.d/cron restart
}

restart(){
	stop
	sleep 1
	start
}

case "$1" in

	"boot" )
		boot
		;;
	"start" )
		start
		;;
	"stop" )
		stop
		;;
	"restart" )
		restart
		;;
	"reload" )
		restart
		;;
esac

